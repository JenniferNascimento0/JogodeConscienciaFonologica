import pygame
import sys
import random
import os

# Inicializando o pygame
pygame.init()

# Dimensões da janela
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Jogo de Consciência Fonológica")

# Cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (70, 130, 180)
GRAY = (200, 200, 200)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

# Fontes
font = pygame.font.Font(None, 36)

# Estados iniciais
idade = None
fonema = None
etapa = 1  # Controle da etapa do menu
mensagem = ""
vidas = 5  # Começa com 5 corações
estrelas = 0  # Contador de acertos

# Diretório de imagens
IMAGES_DIR = r"C:\Users\irine\OneDrive\Documentos\GitHub\JogodeConscienciaFonologica\imagens"  # Atualize o caminho conforme necessário

# Lista de fonemas disponíveis
fonemas_disponiveis = ["S", "L", "M", "N", "P", "T", "C", "G", "B", "F", "V"]

# Carregar imagens por fonema
def carregar_imagens():
    imagens = {}
    for fonema in fonemas_disponiveis:
        caminho = os.path.join(IMAGES_DIR, fonema)
        if os.path.exists(caminho):
            imagens[fonema] = [pygame.image.load(os.path.join(caminho, img)) for img in os.listdir(caminho) if img.endswith(".png")]
    return imagens

imagens_por_fonema = carregar_imagens()

# Variável global para armazenar as posições das imagens
posicoes_imagens = []

# Botão para interações
def botao(texto, x, y, w, h, cor, acao=None):
    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()
    if x + w > mouse[0] > x and y + h > mouse[1] > y:
        pygame.draw.rect(screen, BLUE, (x, y, w, h))
        if click[0] == 1 and acao is not None:
            acao()
    else:
        pygame.draw.rect(screen, cor, (x, y, w, h))
    render = font.render(texto, True, BLACK)
    screen.blit(render, (x + 10, y + 10))

# Funções para selecionar idade e fonema
def set_idade(valor):
    global idade, etapa
    idade = valor
    etapa = 2  # Avança para a etapa de escolha de fonema

def set_fonema(valor):
    global fonema, etapa
    fonema = valor
    etapa = 3  # Avança para a etapa de iniciar o jogo

def voltar(nova_etapa):
    global etapa
    etapa = nova_etapa

def iniciar_jogo():
    global etapa, mensagem, posicoes_imagens
    if idade is None or fonema is None:
        mensagem = "Por favor, selecione a idade e o fonema."
        etapa = 1  # Retorna à tela de seleção
    else:
        mensagem = ""
        etapa = 4  # Inicia o jogo
        posicoes_imagens = []  # Limpa as posições das imagens para gerar novas posições

def verificar_resposta(fonema_imagem):
    global vidas, estrelas, etapa
    if fonema_imagem == fonema:
        estrelas += 1  # Acerto
        mensagem = "Parabéns, continue assim!"
    else:
        vidas -= 1  # Erro
        mensagem = "Errado:( Tente outra vez!"
    
    if vidas == 0:
        etapa = 5  # Tela de Game Over
    else:
        etapa = 4  # Continua o jogo
    
    # Exibir mensagem de feedback
    desenhar_texto(mensagem, WIDTH//2 - 50, HEIGHT - 50, GREEN if mensagem == "Parabéns, continue assim!" else RED)
    pygame.display.flip()
    pygame.time.delay(1000)  # Pausa para mostrar a mensagem

def reiniciar_jogo():
    global vidas, estrelas, etapa, posicoes_imagens
    vidas = 5
    estrelas = 0
    posicoes_imagens = []  # Limpa as posições das imagens
    etapa = 1  # Volta para a tela inicial

def desenhar_tabuleiro():
    global posicoes_imagens
    desenhar_texto("Escolha uma imagem:", 50, 50)
    
    # Se as posições ainda não foram definidas, defina-as
    if not posicoes_imagens:
        imagens = imagens_por_fonema.get(fonema, []) + sum([imagens_por_fonema.get(f, []) for f in fonemas_disponiveis if f != fonema], [])
        random.shuffle(imagens)  # Mistura as imagens
        
        for img in imagens[:8]:  # Exibir apenas algumas imagens
            pos_x = random.randint(50, WIDTH - 150)  # Ajuste para garantir que a imagem caiba na tela
            pos_y = random.randint(100, HEIGHT - 150)
            while any(abs(pos_x - px) < 120 and abs(pos_y - py) < 120 for (_,px, py) in posicoes_imagens):  # Verifica sobreposição
                pos_x = random.randint(50, WIDTH - 150)
                pos_y = random.randint(100, HEIGHT - 150)
            posicoes_imagens.append((img, pos_x, pos_y))  # Armazena a imagem e sua posição
    
    # Desenha as imagens nas posições armazenadas
    for img, pos_x, pos_y in posicoes_imagens:
        screen.blit(img, (pos_x, pos_y))
        botao("", pos_x, pos_y, 100, 100, GRAY, lambda f=img: verificar_resposta(f))

def desenhar_texto(texto, x, y, color=BLACK):
    render = font.render(texto, True, color)
    screen.blit(render, (x, y))

def desenhar_game_over():
    screen.fill(WHITE)
    desenhar_texto("Game Over!", WIDTH//2 - 70, HEIGHT//2, RED)
    desenhar_texto(f"Estrelas coletadas: {estrelas}", WIDTH//2 - 100, HEIGHT//2 + 40, BLACK)
    botao("Reiniciar", WIDTH//2 - 50, HEIGHT//2 + 80, 100, 40, GRAY, reiniciar_jogo)

clock = pygame.time.Clock()
running = True
while running:
    screen.fill(WHITE)
    desenhar_texto("Jogo de Consciência Fonológica", 200, 20)

    if etapa == 1:
        desenhar_texto("Selecione a idade:", 50, 100)
        botao("Menos de 7 anos", 50, 150, 200, 50, GRAY, lambda: set_idade("Menos de 7"))
        botao("7 anos ou mais", 300, 150, 200, 50, GRAY, lambda: set_idade("7 ou mais"))
    elif etapa == 2:
        desenhar_texto("Selecione o fonema:", 50, 100)
        x, y = 50, 150
        for f in fonemas_disponiveis:
            botao(f, x, y, 100, 40, GRAY, lambda f=f: set_fonema(f))
            x += 120
            if x > WIDTH - 100:
                x = 50
                y += 60
        botao("Voltar", 50, 500, 100, 40, GRAY, lambda: voltar(1))
    elif etapa == 3:
        desenhar_texto(f"Idade: {idade}, Fonema: {fonema}", 50, 150)
        botao("Iniciar Jogo", 50, 250, 200, 50, GRAY, iniciar_jogo)
        botao("Voltar", 50, 500, 100, 40, GRAY, lambda: voltar(2))
    elif etapa == 4:
        desenhar_tabuleiro()
        desenhar_texto(f"Vidas: {vidas} ❤", 600, 50, RED)
        desenhar_texto(f"Estrelas: {estrelas} ⭐", 600, 90, BLACK)
    elif etapa == 5:
        desenhar_game_over()
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    pygame.display.flip()
    clock.tick(30)

pygame.quit()
sys.exit()
